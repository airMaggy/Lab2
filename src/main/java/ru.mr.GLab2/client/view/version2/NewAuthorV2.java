package ru.mr.GLab2.client.view.version2;

import ru.mr.GLab2.server.model.Author;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

public class NewAuthorV2 extends JFrame {
    private JTextField nameField;
    private JTextField happyYearField;
    private JTextField sadYearField;
    private JCheckBox aliveCheckBox;
    private JTextField placeField;
    private JTextField intFactsField;
    private JPanel panel1;
    private JLabel mainLabel;
    private JButton createButton;
    private JLabel errorLabel;
    private long id;
//    private ClientWriter clientWr;

    public NewAuthorV2(ClientWriter clientWr, long id) throws IOException {

        this.id = id;
        /*  this.client = client;*/
        //      this.clientWr = clientWr;
        $$$setupUI$$$();
        getContentPane().add(panel1); //Добавить панель с содержимым на форму
        pack(); //Подогнать размеры окна под содержимое
        setVisible(true); //показать форму

        if (id > -1) {
            mainLabel.setText("Edit Author");
            createButton.setText("Update");
//            clientWr.newAuthorGetAuthor(id);
        } else {
            mainLabel.setText("New Author");
            createButton.setText("Create");
        }


        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // alive = aliveBox.isSelected();
                long birthYear = 0;
                long deadYear = 0;
                boolean isCorrect = true;
                try {
                    birthYear = Long.valueOf(happyYearField.getText());
                    if (!aliveCheckBox.isSelected()) deadYear = Long.valueOf(sadYearField.getText());
                } catch (NumberFormatException e1) {
                    errorLabel.setText("Incorrect years");
                    isCorrect = false;
                }
                Boolean alive = aliveCheckBox.isSelected();
                if (isCorrect) {

                    Author tempAuthor = new Author();
                    if (id > -1) {
                        tempAuthor.setId(id);
                    }
                    tempAuthor.setNameAuthor(nameField.getText());
                    tempAuthor.setHappyYear(birthYear);
                    tempAuthor.setSadYear(deadYear);
                    tempAuthor.setHappyPlace(placeField.getText());
                    tempAuthor.setIntFacts(intFactsField.getText());
                    tempAuthor.setAlive(alive);
                    if (id > -1) {
                        clientWr.newAuthorUpdateAuthor(tempAuthor);
                    } else {
                        clientWr.newAuthorCreateAuthor(tempAuthor);
                    }
                } else {
                    errorLabel.setText("Incorrect data");
                }
            }
        });
        aliveCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (aliveCheckBox.isSelected())
                    sadYearField.setEnabled(false);
                else sadYearField.setEnabled(true);
            }
        });
    }

    @Override
    protected void processWindowEvent(WindowEvent e) {
        /*if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            try {
                if (id > -1)
                    clientWr.setFreeAuthorById(id);
                //                   client.setBusyById(id, "n", "author");
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }*/

        super.processWindowEvent(e);
    }

    //два метода на получение предзаполнения

    public void fillAuthorByModificator(Author author) {
        nameField.setText(author.getNameAuthor());
        happyYearField.setText(author.getHappyYear().toString());
        if (author.isAlive()) {
            aliveCheckBox.setSelected(true);
            sadYearField.setEnabled(false);
        } else {
            sadYearField.setText(author.getSadYear().toString());
            aliveCheckBox.setSelected(false);
        }
        placeField.setText(author.getHappyPlace());
        intFactsField.setText(author.getIntFacts());
        this.revalidate();
    }

    public void successCreateOrUpdateAuthor() {
        dispose();
    }

    public void unsuccessCreateOrUpdateAuthor() {
        errorLabel.setText("we have any problems with BD");
        pack();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Name");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameField = new JTextField();
        panel1.add(nameField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Happy Year");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        happyYearField = new JTextField();
        panel1.add(happyYearField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Sad Year");
        panel1.add(label3, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sadYearField = new JTextField();
        panel1.add(sadYearField, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        aliveCheckBox = new JCheckBox();
        aliveCheckBox.setText("alive");
        panel1.add(aliveCheckBox, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Birth Place");
        panel1.add(label4, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        placeField = new JTextField();
        panel1.add(placeField, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Interesting Facts");
        panel1.add(label5, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        intFactsField = new JTextField();
        panel1.add(intFactsField, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        createButton = new JButton();
        createButton.setText("Create");
        panel1.add(createButton, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorLabel = new JLabel();
        errorLabel.setText("");
        panel1.add(errorLabel, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainLabel = new JLabel();
        mainLabel.setText("New Author");
        panel1.add(mainLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
